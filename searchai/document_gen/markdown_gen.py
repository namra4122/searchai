"""
Markdown document generation module for the SearchAI application.
"""

import os
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Tuple

from searchai.config import OUTPUT_DIR
from searchai.utils.logging_config import get_logger
from searchai.utils.exceptions import DocumentGenerationError, FileSystemError, FormatError, ValidationError

logger = get_logger(__name__)

async def generate_markdown(content: str, query: str, query_id: str) -> Tuple[str, int]:
    """
    Generate a Markdown document from the LLM content.
    
    Args:
        content (str): The content generated by the LLM
        query (str): The original user query
        query_id (str): The database ID of the query
        
    Returns:
        tuple: (file_path, file_size) - Path to the generated file and its size
        
    Raises:
        DocumentGenerationError: If document generation fails
        FileSystemError: If file operations fail
        FormatError: If content formatting fails
    """
    logger.info("Generating Markdown document")
    
    try:
        # Validate inputs
        if not content or not content.strip():
            raise FormatError("Content is empty")
        if not query or not query.strip():
            raise ValidationError("Query is empty")
            
        # Create a filename based on the query
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            safe_query = "".join(c if c.isalnum() else "_" for c in query[:30])
            filename = f"{safe_query}_{timestamp}.md"
        except Exception as e:
            raise FormatError(f"Failed to create filename: {str(e)}")
        
        # Create the output directory
        try:
            query_dir = os.path.join(OUTPUT_DIR, query_id)
            os.makedirs(query_dir, exist_ok=True)
        except Exception as e:
            raise FileSystemError(f"Failed to create output directory: {str(e)}")
        
        # Full path to the output file
        output_path = os.path.join(query_dir, filename)
        
        try:
            # Add metadata to the content
            final_content = f"# Research: {query}\n\n"
            final_content += f"*Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n\n"
            final_content += f"---\n\n"
            final_content += content
            
            # Write the content to the file asynchronously
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                lambda: Path(output_path).write_text(final_content, encoding='utf-8')
            )
            
            # Get file size
            file_size = os.path.getsize(output_path)
            
            logger.info(f"Markdown document generated: {output_path}")
            return output_path, file_size
            
        except Exception as e:
            raise DocumentGenerationError(
                message="Failed to write markdown document",
                format="markdown",
                details=str(e)
            )
            
    except (DocumentGenerationError, FileSystemError, FormatError):
        raise
    except Exception as e:
        raise DocumentGenerationError(
            message=f"Unexpected error during markdown generation: {str(e)}",
            format="markdown"
        )